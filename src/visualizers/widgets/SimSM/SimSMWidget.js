/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Apr 14 2021 10:39:10 GMT-0500 (Central Daylight Time).
 */

define(['jointjs', 'css!./styles/SimSMWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'sim-s-m';

    function SimSMWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
        this.init_state = null;
    }

    SimSMWidget.prototype._initialize = function () {
        console.log(joint);
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);
        //cellNamespae required to get token to show in place via stack overflow
        this._jointSM = new joint.dia.Graph({}, { cellNamespace: joint.shapes });
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width: width,
            height: height,
            model: this._jointSM,
            interactive: false,
            cellViewNamespace: joint.shapes
        });

        this._webgmeSM = null;
    };

    SimSMWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // State Machine manipulating functions called from the controller
    SimSMWidget.prototype.initMachine = function (machineDescriptor) {
        const self = this;
        self.init_state = machineDescriptor;
        console.log(machineDescriptor);

        self._webgmeSM = machineDescriptor;
        self._webgmeSM.current = self._webgmeSM.init;
        self._jointSM.clear();
        const sm = self._webgmeSM;
        sm.id2state = {}; // this dictionary will connect the on-screen id to the state id
        // first add the places
        var pn = joint.shapes.pn
        Object.keys(sm.places).forEach(stateId => {
            let vertex = null;

            vertex = new pn.Place({
                position: sm.places[stateId].position,
                attrs: {
                    '.label': {
                        'text': sm.places[stateId].condition,
                        'fill': '#000000'
                    },
                    '.root': {
                        'stroke': '#000000',
                        'stroke-width': 3
                    },
                    '.tokens > circle': {
                        'fill': '#7a7e9b'
                    }
                },
                tokens: sm.places[stateId].tokens
            });

            vertex.addTo(self._jointSM);
            sm.places[stateId].joint = vertex;
            sm.id2state[vertex.id] = stateId;
        });


        // add the transitions
        Object.keys(sm.transitions).forEach(stateId => {
            let vertex = null;

            vertex = new pn.Transition({
                position: sm.transitions[stateId].position,
                //size: { width: 60, height: 60 },
                attrs: {
                    '.label': {
                        'text': sm.transitions[stateId].action,
                        'fill': '#000000'
                    },
                    '.root': {
                        'fill': '#696666',
                        'stroke': '#000000'
                    }
                }

            });

            vertex.addTo(self._jointSM);
            sm.transitions[stateId].joint = vertex;
            sm.id2state[vertex.id] = stateId;
        });

        // then create the links
        Object.keys(sm.places).forEach(stateId => {
            const state = sm.places[stateId];
            Object.keys(state.next).forEach(event => {
                state.jointNext = state.jointNext || {};
                const tar = sm.places[state.next[event]] || sm.transitions[state.next[event]];
                const link = new pn.Link({
                    source: { id: state.joint.id, selector: '.root' },
                    target: { id: tar.joint.id, selector: '.root' },
                    attrs: {
                        '.connection': {
                            fill: 'none',
                            'stroke-linejoin': 'round',
                            'stroke-width': '2',
                            stroke: '#4b4a67',
                        },
                        //g. required to get clean links
                        'g.link-tools': {
                            display: 'none',
                        },
                        'g.marker-arrowheads': {
                            display: 'none',
                        },
                    },
                });

                link.addTo(self._jointSM);
                state.jointNext[event] = link;
            })
        });

        // create the links
        Object.keys(sm.transitions).forEach(stateId => {
            const state = sm.transitions[stateId];
            Object.keys(state.next).forEach(event => {
                state.jointNext = state.jointNext || {};
                const tar = sm.places[state.next[event]] || sm.transitions[state.next[event]];
                const link = new pn.Link({
                    source: { id: state.joint.id, selector: '.root' },
                    target: { id: tar.joint.id, selector: '.root' },
                    attrs: {
                        '.connection': {
                            fill: 'none',
                            'stroke-linejoin': 'round',
                            'stroke-width': '2',
                            stroke: '#4b4a67',
                        },
                        'g.link-tools': {
                            display: 'none',
                        },
                        'g.marker-arrowheads': {
                            display: 'none',
                        },
                    },
                });
                link.addTo(self._jointSM);
                state.jointNext[event] = link;
            })
        });

        //now refresh the visualization
        self._jointPaper.updateViews();
        self._decorateMachine();
    };

    SimSMWidget.prototype.destroyMachine = function () {

    };


    
    SimSMWidget.prototype.fireEvent = function (t_id) {

        //t_event should be transition ID to be fired 
        const sm = this._webgmeSM;
        const self = this;

        const transition = sm.transitions[t_id];
        var inbound = transition.prev;
        var outbound = transition.next;
        var placesBefore = Object.values(inbound); //arcs before would be Object.keys()
        var placesAfter = Object.values(outbound);

        placesBefore.forEach(function (p) {
            const placejoint = sm.places[p].joint;
            var tok = placejoint.get('tokens');
            // Let the execution finish before adjusting the value of tokens. So that we can loop over all transitions
            // and call fireTransition() on the original number of tokens.
            setTimeout(function () {
                placejoint.set('tokens', placejoint.get('tokens') - 1);
            }, 0);
            // keys are the arcs
            Object.keys(inbound).forEach(function (arc) {
                if (inbound[arc] === p) {
                    // get joint object for each arc 
                    const linkjoint = sm.places[p].jointNext[arc];
                    const linkView = linkjoint.findView(self._jointPaper);
                    var token = joint.V('circle', { r: 5, fill: '#feb662' });
                    //send token on incoming arc
                    linkView.sendToken(token, 1000, function () {
                        // after the token is sent down the first arc, then send it on the 
                        // outgoing arc
                        Object.keys(outbound).forEach(function (arc) {

                            // get joint object for each arc 
                            const linkjoint = transition.jointNext[arc];
                            const linkView = linkjoint.findView(self._jointPaper);
                            var token = joint.V('circle', { r: 5, fill: '#feb662' });
                            //send token down the arc
                            linkView.sendToken(token, 1000, function () {
                                var p = outbound[arc];
                                const placejoint = sm.places[p].joint;
                                // adjust number of tokens in the new place
                                placejoint.set('tokens', placejoint.get('tokens') + 1);
                                // adjust the graph
                                self._decorateMachine(setTimeout(function() {if (self.getTransitions().length == 0)
                                    {
                                        alert('There are no more viable actions that can occur.');
                                    }}, 300));
                                // if there are no more events, notify the user
                                
                            });
                            
                        });

                    });
                }
            });
        });
    }

    //@@ reset the simulation to the initial conditions
    SimSMWidget.prototype.resetMachine = function () {
        this.initMachine(this.init_state);
    };

    SimSMWidget.prototype.getTransitions = function () {
        const sm = this._webgmeSM;
        var fireableTransitions = []

        Object.keys(sm.transitions).forEach(transitionId => {
            const transition = sm.transitions[transitionId];
            var inbound = transition.prev;
            var outbound = transition.next;
            var placesBefore = Object.values(inbound); //arcs before would be Object.keys()
            var placesAfter = Object.values(outbound);

            var isFirable = true;
            placesBefore.forEach(function (p) {
                //jointjs object for the place
                const placejoint = sm.places[p].joint;
                if (placejoint.get('tokens') === 0) {
                    isFirable = false;
                }
            });

            // add fireable transition to the list of events (event is transitionID)
            if (isFirable) {
                fireableTransitions.push(transitionId);
            }

        });
        return fireableTransitions;


    };


    SimSMWidget.prototype._decorateMachine = function () {
        const sm = this._webgmeSM;
        const fireableTransitions = this.getTransitions();
        // send all fireable transition id's to the setFireableEvents method
        sm.setFireableEvents(fireableTransitions);
    };


    /* * * * * * * * Visualizer event handlers * * * * * * * */

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    SimSMWidget.prototype.destroy = function () {
    };

    SimSMWidget.prototype.onActivate = function () {
        this._logger.debug('SimSMWidget has been activated');
    };

    SimSMWidget.prototype.onDeactivate = function () {
        this._logger.debug('SimSMWidget has been deactivated');
    };

    return SimSMWidget;
});
